namespace dialogs

import com.amazon.alexa.ask.conversations.Affirm
import com.amazon.alexa.ask.conversations.Bye
import com.amazon.alexa.ask.conversations.ConfirmAction
import com.amazon.alexa.ask.conversations.Inform
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.MultiModalResponse
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Offer
import com.amazon.alexa.ask.conversations.Request
import com.amazon.alexa.ask.conversations.RequestArguments
import com.amazon.alexa.ask.conversations.ensure
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.ask.conversations.CarryOverArgument
import com.amazon.alexa.schema.Nothing
import apis.*
import prompts.*
import types.*
import utterances.*

// Probemos de hacer un modulo reusable para la respuesta de la api

dialog Nothing dialog_APICallOnce(ConfirmApiType args) {
  //El usuario confirma los parametros
  sample {
    validated = APIValidateArgsOnce(
      date = args.date,
      duration = args.duration,
      service = args.service,
      time = args.time
    )

    //ok i will ask for a volunteer blah blah blah
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsOnce
      },
      payload = NotifyApiResponseType {
        statusResponse = validated
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        actionName = APIRequestVolunteer
      }
    )
    //yes!
    expect(
      act = Invoke,
      event = USetAffirm
    )
    //... does the api call requesting the volunteer to lambda ...
    result = APIRequestVolunteer()

    if (result.status == 0) {
      // la llamada a la API anduvo ok!
      //i have requested the volunteer!
      response(
        act = Notify {
          success = true,
          actionName = APIRequestVolunteer
        },
        payload = NotifyApiResponseType {
          statusResponse = result
        },
        response = MultiModalResponse {
          apla = RequestConfirmedPrompt
        }
      )
    } else {
      //hubo un error, llamo a un response de error
      //sorry!
      response(
        act = Notify {
          success = false,
          actionName = APIRequestVolunteer
        },
        payload = NotifyApiResponseType {
          statusResponse = result
        },
        response = MultiModalResponse {
          apla = RequestRejectedPrompt
        }
      )
    }
  }
  //El usuario no confirma los parametros
  sample {
    validated = APIValidateArgsOnce(
      date = args.date,
      duration = args.duration,
      service = args.service,
      time = args.time
    )

    //ok i will ask for a volunteer blah blah blah
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsOnce
      },
      payload = NotifyApiResponseType {
        statusResponse = validated
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        actionName = APIRequestVolunteer
      }
    )
    //nope!
    expect(
      act = Invoke,
      event = USetDeny
    )
    response(
      act = Bye {
      },
      response = MultiModalResponse {
        apla = RequestNotConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialog_RequestVolunteerOnce() {
  /* Requests a volunteer, initial utterance has no parameters */
  sample {
    //i need a volunteer
    expect(
      act = Invoke,
      event = USetRequestVolunteer0
    )
    //for what service?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.service
        ]
      },
      response = MultiModalResponse {
        apla = RequestServicePrompt
      }
    )
    //a guide dog
    ret1 = expect(
      act = Inform,
      event = USetInformService
    )
    //on what date?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.date
        ]
      },
      response = MultiModalResponse {
        apla = RequestDatePrompt
      }
    )
    //tomorow
    ret2 = expect(
      act = Inform,
      event = USetInformDate
    )
    //at what time?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    //at ten a m
    ret3 = expect(
      act = Inform,
      event = USetInformTime
    )
    //for how long?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    //one hour
    ret4 = expect(
      act = Inform,
      event = USetInformDuration
    )
    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.duration
          ]
        }
      ]
    )    
    dialog_APICallOnce(args = ConfirmApiType {
      date = ret2.date,
      duration = ret4.duration,
      service = ret1.service,
      time = ret3.time
    })
  }
  /* Requests volunteer with service and date */
  sample {
    //i need a guide dog tomorrow
    ret1 = expect(
      act = Invoke,
      event = USetRequestVolunteer1
    )
    //at what time?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    //at seven p m for one hour
    ret2 = expect(
      act = Inform,
      event = USetInformTimeAndDuration
    )
    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallOnce(args = ConfirmApiType {
      date = ret1.date,
      duration = ret2.duration,
      service = ret1.service,
      time = ret2.time
    })
  }
  /* Requests volunteer with the four parameters */
  sample {
    // i need a guide dog tomorrow at seven a m for one hour
    ret1 = expect(
      act = Invoke,
      event = USetRequestVolunteer2
    )
    // ensure all arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallOnce(args = ConfirmApiType {
      date = ret1.date,
      duration = ret1.duration,
      service = ret1.service,
      time = ret1.time
    })
  }
  /* Requests volunteers with service, date and time */
  sample {
    // i need a volunteer with a guide dog tomorrow at seven a m
    ret1 = expect(
      act = Invoke,
      event = USetRequestVolunteer3
    )
    // for how long?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    // one hour
    ret2 = expect(
      act = Inform,
      event = USetInformDuration
    )
    //ensure the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallOnce(args = ConfirmApiType {
      date = ret1.date,
      duration = ret2.duration,
      service = ret1.service,
      time = ret1.time
    })
  }
}

dialog Nothing dialog_APICallRecurring(ConfirmApiRecurringType args) {
  sample {
    validated = APIValidateArgsRecurring(
      service = args.service,
      dow = args.dow,
      time = args.time,
      duration = args.duration,
      since = args.since,
      until = args.until
    )

    //ok i will ask for a volunteer blah blah blah
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsRecurring
      },
      payload = NotifyApiResponseType {
        statusResponse = validated
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        actionName = APIRequestVolunteer
      }
    )
    //yes!
    expect(
      act = Invoke,
      event = USetAffirm
    )
    //... does the api call requesting the volunteer to lambda ...
    result = APIRequestVolunteer()

    if (result.status == 0) {
      // la llamada a la API anduvo ok!
      //i have requested the volunteer!
      response(
        act = Notify {
          success = true,
          actionName = APIRequestVolunteer
        },
        payload = NotifyApiResponseType {
          statusResponse = result
        },
        response = MultiModalResponse {
          apla = RequestConfirmedPrompt
        }
      )
    } else {
      //hubo un error, llamo a un response de error
      //sorry!
      response(
        act = Notify {
          success = false,
          actionName = APIRequestVolunteer
        },
        payload = NotifyApiResponseType {
          statusResponse = result
        },
        response = MultiModalResponse {
          apla = RequestRejectedPrompt
        }
      )
    }
  }
}

dialog Nothing dialog_RequestVolunteerRecurring() {
  sample {
    //i want  a volunteer for {service} every {dow}
    ret1 = expect(
      act = Invoke,
      event = USetRequestVolunteer4
    )
    //at what time?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    //at ten a m
    ret2 = expect(
      act = Inform,
      event = USetInformTime
    )
    //for how long?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    //one hour
    ret3 = expect(
      act = Inform,
      event = USetInformDuration
    )
    //since what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.since
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateSincePrompt
      }
    )
    ret4 = expect(
      act = Inform,
      event = USetInformDateSince
    )
    //until what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.until
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateUntilPrompt
      }
    )
    ret5 = expect(
      act = Inform,
      event = USetInformDateUntil
    )
    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.service
          ]
        }
      ]
    )
    ensure( //since
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateSincePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.since
          ]
        }
      ]
    )
    ensure( //until
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateUntilPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.until
          ]
        }
      ]
    )
    ensure( //dow
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.dow
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallRecurring(args = ConfirmApiRecurringType {
      service = ret1.service,
      dow = ret1.dow,
      time = ret2.time,
      duration = ret3.duration,
      since = ret4.date,
      until = ret5.date
    })
  }

  sample {
    //i want  a volunteer every {dow}
    ret1 = expect(
      act = Invoke,
      event = USetRequestVolunteer5
    )
    //for what service?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.service
        ]
      },
      response = MultiModalResponse {
        apla = RequestServicePrompt
      }
    )
    //a guide dog
    ret2 = expect(
      act = Inform,
      event = USetInformService
    )
    //at what time?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    //at ten a m
    ret3 = expect(
      act = Inform,
      event = USetInformTime
    )
    //for how long?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    ) 
    //one hour
    ret4 = expect(
      act = Inform,
      event = USetInformDuration
    )
    //since what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.since
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateSincePrompt
      }
    )
    ret5 = expect(
      act = Inform,
      event = USetInformDateSince
    )
    //until what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.until
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateUntilPrompt
      }
    )
    ret6 = expect(
      act = Inform,
      event = USetInformDateUntil
    )
    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.service
          ]
        }
      ]
    )
    ensure( //since
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateSincePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.since
          ]
        }
      ]
    )
    ensure( //until
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateUntilPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.until
          ]
        }
      ]
    )
    ensure( //dow
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.dow
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallRecurring(args = ConfirmApiRecurringType {
      service = ret2.service,
      dow = ret1.dow,
      time = ret3.time,
      duration = ret4.duration,
      since = ret5.date,
      until = ret6.date
    })
  }

  sample {
    //I want a volunteer for {service} at {time} every {dow}
    ret1 = expect(
      act = Invoke,
      event = USetRequestVolunteer6
    )
    //for how long?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    //one hour
    ret2 = expect(
      act = Inform,
      event = USetInformDuration
    )
    //since what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.since
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateSincePrompt
      }
    )
    ret3 = expect(
      act = Inform,
      event = USetInformDateSince
    )
    //until what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.until
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateUntilPrompt
      }
    )
    ret4 = expect(
      act = Inform,
      event = USetInformDateUntil
    )

    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.service
          ]
        }
      ]
    )
    ensure( //since
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateSincePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.since
          ]
        }
      ]
    )
    ensure( //until
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateUntilPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.until
          ]
        }
      ]
    )
    ensure( //dow
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.dow
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallRecurring(args = ConfirmApiRecurringType {
      service = ret1.service,
      dow = ret1.dow,
      time = ret1.time,
      duration = ret2.duration,
      since = ret3.date,
      until = ret4.date
    })
  }
}