namespace dialogs

import apis.APIRequestVolunteer
import apis.APIValidateArgsOnce
import apis.APIValidateArgsRecurring
import com.amazon.alexa.ask.conversations.Affirm
import com.amazon.alexa.ask.conversations.Bye
import com.amazon.alexa.ask.conversations.ConfirmAction
import com.amazon.alexa.ask.conversations.Inform
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.MultiModalResponse
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Offer
import com.amazon.alexa.ask.conversations.Request
import com.amazon.alexa.ask.conversations.RequestArguments
import com.amazon.alexa.ask.conversations.ensure
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.ask.conversations.CarryOverArgument
import com.amazon.alexa.schema.Nothing
import prompts.ConfirmRequestPrompt
import prompts.RequestConfirmedPrompt
import prompts.RequestNotConfirmedPrompt
import prompts.RequestRejectedPrompt
import prompts.RequestDatePrompt
import prompts.RequestDurationPrompt
import prompts.RequestServicePrompt
import prompts.RequestTimePrompt
import prompts.RequestDateSincePrompt
import prompts.RequestDateUntilPrompt
import prompts.RequestDowPrompt
import types.ConfirmApiType
import types.ConfirmApiRecurringType
import types.ValidatedConfirmApiType
import types.ValidatedConfirmRecurringApiType
import types.ValidatedArgsOnce
import types.ValidatedArgsRecurring
import types.NotifyApiResponseType
import utterances.USetAffirm
import utterances.USetDeny
import utterances.USetInformDate
import utterances.USetInformDuration
import utterances.USetInformService
import utterances.USetInformTime
import utterances.USetInformTimeAndDuration
import utterances.USetRequestVolunteer0
import utterances.USetRequestVolunteer1
import utterances.USetRequestVolunteer2
import utterances.USetRequestVolunteer3
import utterances.USetRequestVolunteer4
import utterances.USetRequestVolunteer5
import utterances.USetRequestVolunteer6
import utterances.USetInformDateSince
import utterances.USetInformDateUntil

// Probemos de hacer un modulo reusable para la respuesta de la api

dialog Nothing dialog_APICallOnce(ConfirmApiType args) {
  //El usuario confirma los parametros
  sample {
    validated = APIValidateArgsOnce(
      date = args.date,
      duration = args.duration,
      service = args.service,
      time = args.time
    )

    //ok i will ask for a volunteer blah blah blah
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsOnce
      },
      payload = ValidatedConfirmApiType {
        validated = validated
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        actionName = APIRequestVolunteer
      }
    )
    //yes!
    expect(
      act = Invoke,
      event = USetAffirm
    )
    //... does the api call requesting the volunteer to lambda ...
    result = APIRequestVolunteer()

    if (result.status == 0) {
      // la llamada a la API anduvo ok!
      //i have requested the volunteer!
      response(
        act = Notify {
          success = true,
          actionName = APIRequestVolunteer
        },
        payload = NotifyApiResponseType {
          volunteerRequest = result
        },
        response = MultiModalResponse {
          apla = RequestConfirmedPrompt
        }
      )
    } else {
      //hubo un error, llamo a un response de error
      //sorry!
      response(
        act = Notify {
          success = false,
          actionName = APIRequestVolunteer
        },
        payload = NotifyApiResponseType {
          volunteerRequest = result
        },
        response = MultiModalResponse {
          apla = RequestRejectedPrompt
        }
      )
    }
  }
  //El usuario no confirma los parametros
  sample {
    validated = APIValidateArgsOnce(
      date = args.date,
      duration = args.duration,
      service = args.service,
      time = args.time
    )

    //ok i will ask for a volunteer blah blah blah
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsOnce
      },
      payload = ValidatedConfirmApiType {
        validated = validated
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        actionName = APIRequestVolunteer
      }
    )
    //nope!
    expect(
      act = Invoke,
      event = USetDeny
    )
    response(
      act = Bye {
      },
      response = MultiModalResponse {
        apla = RequestNotConfirmedPrompt
      }
    )
  }
}

dialog Nothing dialog_RequestVolunteerOnce() {
  /* Requests a volunteer, initial utterance has no parameters */
  sample {
    //i need a volunteer
    expect(
      act = Invoke,
      event = USetRequestVolunteer0
    )
    //for what service?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.service
        ]
      },
      response = MultiModalResponse {
        apla = RequestServicePrompt
      }
    )
    //a guide dog
    USetInformServiceRequest = expect(
      act = Inform,
      event = USetInformService
    )
    //on what date?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.date
        ]
      },
      response = MultiModalResponse {
        apla = RequestDatePrompt
      }
    )
    //tomorow
    USetInformDateRequest = expect(
      act = Inform,
      event = USetInformDate
    )
    //at what time?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    //at ten a m
    USetInformTimeRequest = expect(
      act = Inform,
      event = USetInformTime
    )
    //for how long?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    //one hour
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.duration
          ]
        }
      ]
    )    
    dialog_APICallOnce(args = ConfirmApiType {
      date = USetInformDateRequest.date,
      duration = USetInformDurationRequest.duration,
      service = USetInformServiceRequest.service,
      time = USetInformTimeRequest.time
    })
  }
  /* Requests volunteer with service and date */
  sample {
    //i need a guide dog tomorrow
    USetRequestVolunteer1Request = expect(
      act = Invoke,
      event = USetRequestVolunteer1
    )
    //at what time?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    //at seven p m for one hour
    USetInformTimeAndDurationRequest = expect(
      act = Inform,
      event = USetInformTimeAndDuration
    )
    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallOnce(args = ConfirmApiType {
      date = USetRequestVolunteer1Request.date,
      duration = USetInformTimeAndDurationRequest.duration,
      service = USetRequestVolunteer1Request.service,
      time = USetInformTimeAndDurationRequest.time
    })
  }
  /* Requests volunteer with the four parameters */
  sample {
    // i need a guide dog tomorrow at seven a m for one hour
    USetRequestVolunteer2Request = expect(
      act = Invoke,
      event = USetRequestVolunteer2
    )
    // ensure all arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallOnce(args = ConfirmApiType {
      date = USetRequestVolunteer2Request.date,
      duration = USetRequestVolunteer2Request.duration,
      service = USetRequestVolunteer2Request.service,
      time = USetRequestVolunteer2Request.time
    })
  }
  /* Requests volunteers with service, date and time */
  sample {
    // i need a volunteer with a guide dog tomorrow at seven a m
    USetRequestVolunteer3Request = expect(
      act = Invoke,
      event = USetRequestVolunteer3
    )
    // for how long?
    response(
      act = Request {
        arguments = [
          APIValidateArgsOnce.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    // one hour
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    //ensure the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsOnce.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallOnce(args = ConfirmApiType {
      date = USetRequestVolunteer3Request.date,
      duration = USetInformDurationRequest.duration,
      service = USetRequestVolunteer3Request.service,
      time = USetRequestVolunteer3Request.time
    })
  }
}

dialog Nothing dialog_APICallRecurring(ConfirmApiRecurringType args) {
  sample {
    validated = APIValidateArgsRecurring(
      service = args.service,
      dow = args.dow,
      time = args.time,
      duration = args.duration,
      since = args.since,
      until = args.until
    )

    //ok i will ask for a volunteer blah blah blah
    response(
      act = Notify {
        success = true,
        actionName = APIValidateArgsRecurring
      },
      payload = ValidatedConfirmRecurringApiType {
        validated = validated
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      },
      nextAct = Offer {
        actionName = APIRequestVolunteer
      }
    )
    //yes!
    expect(
      act = Invoke,
      event = USetAffirm
    )
    //... does the api call requesting the volunteer to lambda ...
    result = APIRequestVolunteer()

    if (result.status == 0) {
      // la llamada a la API anduvo ok!
      //i have requested the volunteer!
      response(
        act = Notify {
          success = true,
          actionName = APIRequestVolunteer
        },
        payload = NotifyApiResponseType {
          volunteerRequest = result
        },
        response = MultiModalResponse {
          apla = RequestConfirmedPrompt
        }
      )
    } else {
      //hubo un error, llamo a un response de error
      //sorry!
      response(
        act = Notify {
          success = false,
          actionName = APIRequestVolunteer
        },
        payload = NotifyApiResponseType {
          volunteerRequest = result
        },
        response = MultiModalResponse {
          apla = RequestRejectedPrompt
        }
      )
    }
  }
}

dialog Nothing dialog_RequestVolunteerRecurring() {
  sample {
    //i want  a volunteer for {service} every {dow}
    ServiceAndDow = expect(
      act = Invoke,
      event = USetRequestVolunteer4
    )
    //at what time?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    //at ten a m
    Time = expect(
      act = Inform,
      event = USetInformTime
    )
    //for how long?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    //one hour
    Duration = expect(
      act = Inform,
      event = USetInformDuration
    )
    //since what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.since
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateSincePrompt
      }
    )
    DateSince = expect(
      act = Inform,
      event = USetInformDateSince
    )
    //until what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.until
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateUntilPrompt
      }
    )
    DateUntil = expect(
      act = Inform,
      event = USetInformDateUntil
    )
    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.service
          ]
        }
      ]
    )
    ensure( //since
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateSincePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.since
          ]
        }
      ]
    )
    ensure( //until
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateUntilPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.until
          ]
        }
      ]
    )
    ensure( //dow
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.dow
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallRecurring(args = ConfirmApiRecurringType {
      service = ServiceAndDow.service,
      dow = ServiceAndDow.dow,
      time = Time.time,
      duration = Duration.duration,
      since = DateSince.date,
      until = DateUntil.date
    })
  }

  sample {
    //i want  a volunteer every {dow}
    Dow = expect(
      act = Invoke,
      event = USetRequestVolunteer5
    )
    //for what service?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.service
        ]
      },
      response = MultiModalResponse {
        apla = RequestServicePrompt
      }
    )
    //a guide dog
    Service = expect(
      act = Inform,
      event = USetInformService
    )
    //at what time?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    //at ten a m
    Time = expect(
      act = Inform,
      event = USetInformTime
    )
    //for how long?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    ) 
    //one hour
    Duration = expect(
      act = Inform,
      event = USetInformDuration
    )
    //since what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.since
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateSincePrompt
      }
    )
    DateSince = expect(
      act = Inform,
      event = USetInformDateSince
    )
    //until what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.until
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateUntilPrompt
      }
    )
    DateUntil = expect(
      act = Inform,
      event = USetInformDateUntil
    )
    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.service
          ]
        }
      ]
    )
    ensure( //since
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateSincePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.since
          ]
        }
      ]
    )
    ensure( //until
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateUntilPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.until
          ]
        }
      ]
    )
    ensure( //dow
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.dow
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallRecurring(args = ConfirmApiRecurringType {
      service = Service.service,
      dow = Dow.dow,
      time = Time.time,
      duration = Duration.duration,
      since = DateSince.date,
      until = DateUntil.date
    })
  }

  sample {
    //I want a volunteer for {service} at {time} every {dow}
    ServiceDowTime = expect(
      act = Invoke,
      event = USetRequestVolunteer6
    )
    //for how long?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    //one hour
    Duration = expect(
      act = Inform,
      event = USetInformDuration
    )
    //since what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.since
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateSincePrompt
      }
    )
    DateSince = expect(
      act = Inform,
      event = USetInformDateSince
    )
    //until what day?
    response(
      act = Request {
        arguments = [
          APIValidateArgsRecurring.arguments.until
        ]
      },
      response = MultiModalResponse {
        apla = RequestDateUntilPrompt
      }
    )
    DateUntil = expect(
      act = Inform,
      event = USetInformDateUntil
    )

    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.service
          ]
        }
      ]
    )
    ensure( //since
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateSincePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.since
          ]
        }
      ]
    )
    ensure( //until
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDateUntilPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.until
          ]
        }
      ]
    )
    ensure( //dow
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDowPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.dow
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIValidateArgsRecurring.arguments.duration
          ]
        }
      ]
    )
    dialog_APICallRecurring(args = ConfirmApiRecurringType {
      service = ServiceDowTime.service,
      dow = ServiceDowTime.dow,
      time = ServiceDowTime.time,
      duration = Duration.duration,
      since = DateSince.date,
      until = DateUntil.date
    })
  }
}