namespace dialogs

import apis.APIRequestVolunteer
import com.amazon.alexa.ask.conversations.Affirm
import com.amazon.alexa.ask.conversations.ConfirmAction
import com.amazon.alexa.ask.conversations.Inform
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.MultiModalResponse
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Request
import com.amazon.alexa.ask.conversations.RequestArguments
import com.amazon.alexa.ask.conversations.ensure
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.schema.Nothing
import prompts.ConfirmRequestPrompt
import prompts.RequestConfirmedPrompt
import prompts.RequestRejectedPrompt
import prompts.RequestDatePrompt
import prompts.RequestDurationPrompt
import prompts.RequestServicePrompt
import prompts.RequestTimePrompt
import types.ConfirmApiType
import types.NotifyApiResponseType
import utterances.USetAffirm
import utterances.USetInformDate
import utterances.USetInformDuration
import utterances.USetInformService
import utterances.USetInformTime
import utterances.USetInformTimeAndDuration
import utterances.USetRequestVolunteer0
import utterances.USetRequestVolunteer1
import utterances.USetRequestVolunteer2
import utterances.USetRequestVolunteer3

// Probemos de hacer un modulo reusable para la respuesta de la api

dialog Nothing ThisIsTheAPICall(ConfirmApiType args) {
  sample {
    //... does the api call requesting the volunteer to lambda ...
    result = APIRequestVolunteer(
      date = args.date,
      duration = args.duration,
      service = args.service,
      time = args.time
    )

    if (result.status == 0) {
      // la llamada a la API anduvo ok!
      //i have requested the volunteer!
      response(
        act = Notify {
          success = true,
          actionName = APIRequestVolunteer
        },
        payload = NotifyApiResponseType {
          volunteerRequest = result
        },
        response = MultiModalResponse {
          apla = RequestConfirmedPrompt
        }
      )
    } else {
      //hubo un error, llamo a un response de error
      //sorry!
      response(
        act = Notify {
          success = false,
          actionName = APIRequestVolunteer
        },
        payload = NotifyApiResponseType {
          volunteerRequest = result
        },
        response = MultiModalResponse {
          apla = RequestRejectedPrompt
        }
      )
    }
  }
}


/* Requests a volunteer, initial utterance has no parameters */
dialog Nothing dialogName_RequestVolunteer0() {
  sample {
    //i need a volunteer
    expect(
      act = Invoke,
      event = USetRequestVolunteer0
    )
    //for what service?
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.service
        ]
      },
      response = MultiModalResponse {
        apla = RequestServicePrompt
      }
    )
    //a guide dog
    USetInformServiceRequest = expect(
      act = Inform,
      event = USetInformService
    )
    //on what date?
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.date
        ]
      },
      response = MultiModalResponse {
        apla = RequestDatePrompt
      }
    )
    //tomorow
    USetInformDateRequest = expect(
      act = Inform,
      event = USetInformDate
    )
    //at what time?
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    //at ten a m
    USetInformTimeRequest = expect(
      act = Inform,
      event = USetInformTime
    )
    //for how long?
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    //one hour
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    //ok i will ask for a volunteer blah blah blah.. ok?
    response(
      act = ConfirmAction {
        actionName = APIRequestVolunteer
      },
      payload = ConfirmApiType {
        date = USetInformDateRequest.date,
        duration = USetInformDurationRequest.duration,
        service = USetInformServiceRequest.service,
        time = USetInformTimeRequest.time
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      }
    )
    //yes!
    expect(
      act = Affirm,
      event = USetAffirm
    )
    ThisIsTheAPICall(args = ConfirmApiType {
      date = USetInformDateRequest.date,
      duration = USetInformDurationRequest.duration,
      service = USetInformServiceRequest.service,
      time = USetInformTimeRequest.time
    })
  }
}

/* Requests volunteer with service and date */
dialog Nothing dialogName_RequestVolunteer1() {
  sample {
    //i need a guide dog tomorrow
    USetRequestVolunteer1Request = expect(
      act = Invoke,
      event = USetRequestVolunteer1
    )
    //at what time?
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.time
        ]
      },
      response = MultiModalResponse {
        apla = RequestTimePrompt
      }
    )
    //at seven p m for one hour
    USetInformTimeAndDurationRequest = expect(
      act = Inform,
      event = USetInformTimeAndDuration
    )
    //ok i will ask for a volunteer.... ok?
    response(
      act = ConfirmAction {
        actionName = APIRequestVolunteer
      },
      payload = ConfirmApiType {
        date = USetRequestVolunteer1Request.date,
        duration = USetInformTimeAndDurationRequest.duration,
        service = USetRequestVolunteer1Request.service,
        time = USetInformTimeAndDurationRequest.time
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      }
    )
    //yep
    expect(
      act = Affirm,
      event = USetAffirm
    )
    //let's make sure all the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.duration
          ]
        }
      ]
    )
    ThisIsTheAPICall(args = ConfirmApiType {
      date = USetRequestVolunteer1Request.date,
      duration = USetInformTimeAndDurationRequest.duration,
      service = USetRequestVolunteer1Request.service,
      time = USetInformTimeAndDurationRequest.time
    })
  }
}

/* Requests volunteer with the four parameters */
dialog Nothing dialogName_RequestVolunteer2() {
  sample {
    // i need a guide dog tomorrow at seven a m for one hour
    USetRequestVolunteer2Request = expect(
      act = Invoke,
      event = USetRequestVolunteer2
    )
    // ok, i will ask for ..... ok?
    response(
      act = ConfirmAction {
        actionName = APIRequestVolunteer
      },
      payload = ConfirmApiType {
        date = USetRequestVolunteer2Request.date,
        duration = USetRequestVolunteer2Request.duration,
        service = USetRequestVolunteer2Request.service,
        time = USetRequestVolunteer2Request.time
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      }
    )
    //hell yes
    expect(
      act = Affirm,
      event = USetAffirm
    )
    // ensure all arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.duration
          ]
        }
      ]
    )
    ThisIsTheAPICall(args = ConfirmApiType {
      date = USetRequestVolunteer2Request.date,
      duration = USetRequestVolunteer2Request.duration,
      service = USetRequestVolunteer2Request.service,
      time = USetRequestVolunteer2Request.time
    })
  }
}

/* Requests volunteers with service, date and time */
dialog Nothing dialogName_RequestVolunteer3() {
  sample {
    // i need a volunteer with a guide dog tomorrow at seven a m
    USetRequestVolunteer3Request = expect(
      act = Invoke,
      event = USetRequestVolunteer3
    )
    // for how long?
    response(
      act = Request {
        arguments = [
          APIRequestVolunteer.arguments.duration
        ]
      },
      response = MultiModalResponse {
        apla = RequestDurationPrompt
      }
    )
    // one hour
    USetInformDurationRequest = expect(
      act = Inform,
      event = USetInformDuration
    )
    // ok i will ask for it, ok?
    response(
      act = ConfirmAction {
        actionName = APIRequestVolunteer
      },
      payload = ConfirmApiType {
        date = USetRequestVolunteer3Request.date,
        duration = USetInformDurationRequest.duration,
        service = USetRequestVolunteer3Request.service,
        time = USetRequestVolunteer3Request.time
      },
      response = MultiModalResponse {
        apla = ConfirmRequestPrompt
      }
    )
    //of course
    expect(
      act = Affirm,
      event = USetAffirm
    )
    //ensure the arguments are in
    ensure( //service
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestServicePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.service
          ]
        }
      ]
    )
    ensure( //date
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDatePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.date
          ]
        }
      ]
    )
    ensure( //time
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestTimePrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.time
          ]
        }
      ]
    )
    ensure( //duration
      requestArgs = [
        RequestArguments {
          response = MultiModalResponse {
            apla = RequestDurationPrompt
          },
          arguments = [
            APIRequestVolunteer.arguments.duration
          ]
        }
      ]
    )
    ThisIsTheAPICall(args = ConfirmApiType {
      date = USetRequestVolunteer3Request.date,
      duration = USetInformDurationRequest.duration,
      service = USetRequestVolunteer3Request.service,
      time = USetRequestVolunteer3Request.time
    })
  }
}
